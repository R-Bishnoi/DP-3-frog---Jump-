#include<bits/stdc++.h>

//recurrsion 
/*
int solve(int n,vector<int>&v){

if(n==0)return 0;
if(n==1)return abs(v[1]-v[0]);    
 
 int a=solve(n-1,v) + abs(v[n]-v[n-1]);
 int b=solve(n-2,v) + abs(v[n]-v[n-2]);
    
    return min(a,b);

}
*/


// memoization 
/*
int solve(int n,vector<int>&v,vector<int>&dp){

    if(n==0)return 0;
    if(n==1)return abs(v[1]-v[0]);

  if(dp[n]!=-1)return dp[n];
    
      int left  =solve(n-1,v,dp)+abs(v[n]-v[n-1]);
      int right  =solve(n-2,v,dp)+abs(v[n]-v[n-2]);
    
    return dp[n]=min(left,right);
    

}
*/



//tabulation
/*
int frogJump(int n, vector<int> &hg){
    vector<int>dp(n+1,-1);
    dp[0]=0;
    n=n-1;
    dp[1]=abs(hg[1]-hg[0]);
    
     for(int i=2;i<=n;i++){
        int l=dp[i-1]+abs(hg[i]-hg[i-1]);
        int r=dp[i-2]+abs(hg[i]-hg[i-2]);
        dp[i]= min(l,r);
    }
    
    return dp[n];
 
      
}
*/




// space optimization 
int frogJump(int n, vector<int> &hg){
   // vector<int>dp(n+1,-1);
   // dp[0]=0;
    n=n-1;
    
   // dp[1]=abs(hg[1]-hg[0]);
    
    int prev2=0;
    int prev1=abs(hg[1]-hg[0]);
    if(n==0)return 0;
    if(n==1)return abs(hg[0]-hg[1]);
    int p,q;
     for(int i=2;i<=n;i++){
        int curr1=prev1+abs(hg[i]-hg[i-1]);
        int curr2=prev2+abs(hg[i]-hg[i-2]);
      
        prev2=prev1;
        prev1= min(curr1,curr2); 
    }
    
    return prev1;
 
      
}

